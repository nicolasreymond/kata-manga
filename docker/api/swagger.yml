swagger: "2.0"
info:
  description: "This is a server Manga list server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Kata-Manga By nreymond"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "n.reymond.12@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/object/manga.php"
tags:
- name: "manga"
  description: "Everything about the Manga"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /manga:
    post:
      tags:
      - "manga"
      summary: "Add a new manga to the list"
      description: ""
      operationId: "addManga"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Manga object that needs to be added to the list"
        required: true
        schema:
          $ref: "#/definitions/Manga"
      responses:
        "405":
          description: "Invalid input"
    get:
      tags:
      - "manga"
      summary: "Get all existing manga"
      description: ""
      operationId: "updateManga"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Manga object that needs to be added to the list"
        required: true
        schema:
          $ref: "#/definitions/Manga"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Manga not found"
        "405":
          description: "Validation exception"
  /manga/findByAuthor/{author}:
    get:
      tags:
      - "manga"
      summary: "Finds Manga by author"
      description: ""
      operationId: "findMangasByAuthor"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "author"
        required: true
        type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Manga"
        "400":
          description: "Invalid author value"
  /manga/findByGenre/{genre}:
     get:
      tags:
      - "manga"
      summary: "Finds Manga by genre"
      description: ""
      operationId: "findMangasByGenre"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "genre"
        required: true
        type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Manga"
        "400":
          description: "Invalid author value"
  /manga/{id}:
    get:
      tags:
      - "manga"
      summary: "Find manga by ID"
      description: "Returns a single manga"
      operationId: "getMangaById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: path
        name: id   # Note the name is the same as in the path
        required: true
        type: integer
        minimum: 1
        description: The user ID
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Manga"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Manga not found"
    delete:
      tags:
      - "manga"
      summary: "Deletes a manga"
      description: ""
      operationId: "deleteManga"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: path
        name: id   # Note the name is the same as in the path
        required: true
        type: integer
        minimum: 1
        description: The user ID
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Manga not found"
  /manga/{name}:
    get:
      tags:
      - "manga"
      summary: "Find manga by ID"
      description: "Returns a single manga"
      operationId: "getMangaById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: path
        name: name   # Note the name is the same as in the path
        required: true
        type: string
        minimum: 1
        description: The user ID
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Manga"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Manga not found"
definitions:
  Genre:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Genre"
  Magazine:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Magazine"
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      first_name:
        type: "string"
      last_name:
        type: "string"
    xml:
      name: "Author"
  Manga:
    type: "object"
    required:
    - "rank"
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Naruto"
      rank:
        type: "integer"
      magazine:
        type: "array"
        xml:
          name: "magazine"
          wrapped: true
        items:
          $ref: "#/definitions/Magazine"
      genre:
        type: "array"
        xml:
          name: "genre"
          wrapped: true
        items:
          $ref: "#/definitions/Genre"
      author:
        type: "array"
        xml:
          name: "author"
          wrapped: true
        items:
          $ref: "#/definitions/Author"
      status:
        type: "string"
        description: "Manga writing status"
        enum:
        - "currently_publishing"
        - "finished"
        - "on_hiatus"
    xml:
      name: "manga"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"